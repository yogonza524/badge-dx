buildscript {
	repositories {
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.1'
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'com.github.sherter.google-java-format' version '0.8'
	id 'java'
}

apply plugin: 'info.solidsoft.pitest'
apply plugin: 'jacoco'

group = 'com.badge.dx'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR8")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	compile 'org.pitest:pitest-junit5-plugin:0.12'
	compile 'org.springdoc:springdoc-openapi-ui:1.4.4'

	// Dev Libs
	compileOnly("org.projectlombok:lombok:1.18.12")
	annotationProcessor("org.projectlombok:lombok:1.18.12")

	// Guthub client
	compile 'org.kohsuke:github-api:1.116'

	// Guava
	implementation 'com.google.guava:guava:29.0-jre'

	// https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
	compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.9.0.202009080501-r'

	// Gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

tasks.withType(Test) {
	testLogging {
		exceptionFormat "full"
		events "passed", "failed", "skipped"
	}
	useJUnitPlatform()
	jvmArgs '--enable-preview'
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.7
			}
		}
	}
}

task codeCoverageReport(type: JacocoReport) {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/report.xml")
		html.enabled false
		csv.enabled false
	}

	sourceSets sourceSets.main
}

//jacocoTestCoverageVerification.dependsOn jacocoTestReport
test {
	finalizedBy codeCoverageReport
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

pitest {
	testPlugin = "junit5"
	targetClasses = ['com.badge.dx.*']
	mainSourceSets = [sourceSets.main]
	testSourceSets = [sourceSets.test]
	excludedClasses = [
			'com.badge.dx.BadgeDxApplication'
	]
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
	failWhenNoMutations = false
	threads = 12
	verbose = true
	coverageThreshold = 90
	mutationThreshold = 70
	mutators = ['CONDITIONALS_BOUNDARY',
				'INCREMENTS',
				'INVERT_NEGS',
				'MATH',
				'NEGATE_CONDITIONALS',
				'RETURN_VALS',
				'VOID_METHOD_CALLS',
				'INLINE_CONSTS',
				'REMOVE_CONDITIONALS',
				'EMPTY_RETURNS',
				'FALSE_RETURNS',
				'TRUE_RETURNS',
				'NULL_RETURNS',
				'PRIMITIVE_RETURNS']
}